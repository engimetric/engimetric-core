import createMiddleware from 'next-intl/middleware';
import { type NextFetchEvent, type NextRequest, NextResponse } from 'next/server';
import { routing } from './libs/i18nNavigation';

const intlMiddleware = createMiddleware(routing);

const isProtectedRoute = (path: string) => {
    return [
        '/dashboard(.*)',
        '/:locale/dashboard(.*)',
        '/onboarding(.*)',
        '/:locale/onboarding(.*)',
        '/api(.*)',
        '/:locale/api(.*)',
    ].some((pattern) => new RegExp(pattern).test(path));
};

const isAuthPage = (path: string) => {
    return ['/login(.*)', '/:locale/login(.*)', '/sign-up(.*)', '/:locale/sign-up(.*)'].some((pattern) =>
        new RegExp(pattern).test(path),
    );
};

async function customAuthMiddleware(request: NextRequest) {
    const token = request.cookies.get('auth_token');
    const isAuthenticated = token && validateToken(token.value); // Replace `validateToken` with your auth logic

    if (isProtectedRoute(request.nextUrl.pathname) && !isAuthenticated) {
        const locale = request.nextUrl.pathname.match(/(\/.+)\/dashboard/)?.[1] || '';
        const loginUrl = new URL(`${locale}/login`, request.url);
        return NextResponse.redirect(loginUrl);
    }

    if (
        isAuthenticated &&
        !hasOrganization(token.value) && // Replace `hasOrganization` with your auth logic
        request.nextUrl.pathname.includes('/dashboard') &&
        !request.nextUrl.pathname.endsWith('/organization-selection')
    ) {
        const orgSelection = new URL('/onboarding/organization-selection', request.url);
        return NextResponse.redirect(orgSelection);
    }

    return intlMiddleware(request);
}

export default function middleware(request: NextRequest, event: NextFetchEvent) {
    if (isAuthPage(request.nextUrl.pathname) || isProtectedRoute(request.nextUrl.pathname)) {
        return customAuthMiddleware(request);
    }

    return intlMiddleware(request);
}

export const config = {
    matcher: [
        '/((?!_next|monitoring|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
        '/(api|trpc)(.*)',
    ],
};

// Placeholder auth validation functions
function validateToken(token: string): boolean {
    // Implement your custom token validation logic here
    return Boolean(token);
}

function hasOrganization(token: string): boolean {
    // Implement your logic to check if the user has an organization
    return true;
}
